Social Database Answers
Austin Newman
Write Queries 

1. Find the names of all students who are friends with someone named Gabriel.

    select distinct name from Highschooler where ID in (select ID1 from Friend where ID2 in (select ID from Highschooler where name="Gabriel"));


2. Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades.

    select name,grade from Highschooler where ID not in (select ID1 from Likes union select ID2 from Likes) order by grade, name;
    
    
3. Find the name and grade of all students who are liked by more than one other student.

    select name, grade 
    from (select ID2, count(ID2) as numLiked from Likes group by ID2), Highschooler
    where numLiked > 1 and ID2 = ID;
    
    
4. For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like.

    select distinct sName, sGrade, lName, lGrade
    from (select h1.name as sName, h1.grade sGrade, h2.name as lName, h2.grade as lGrade, h1.grade-h2.grade as gradeDiff 
        from Highschooler h1, Likes, Highschooler h2
        where h1.ID = ID1 and h2.ID = ID2)
    where gradeDiff > 1;


5. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. (what about students with no friends?)

    select name, grade from Highschooler
    where ID not in (select ID1 from Highschooler H1, Friend, Highschooler H2 where H1.ID = Friend.ID1 and Friend.ID2 = H2.ID and H1.grade <> H2.grade)
    order by grade, name;


6. For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C.

    select distinct H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
    from Highschooler H1, Likes, Highschooler H2, Highschooler H3, Friend F1, Friend F2
    where H1.ID = Likes.ID1 and Likes.ID2 = H2.ID and
        H2.ID not in (select ID2 from Friend where ID1 = H1.ID) and
        H1.ID = F1.ID1 and F1.ID2 = H3.ID and
        H3.ID = F2.ID1 and F2.ID2 = H2.ID;


7. Find the difference between the number of students in the school and the number of different first names.

    select st.sNum-nm.nNum from 
    (select count(*) as sNum from Highschooler) as st,
    (select count(distinct name) as nNum from Highschooler) as nm;


8. What is the average number of friends per student? (Your result should be just one number.)

    SELECT AVG(count)
    FROM 
    (
        SELECT COUNT(*) AS count
        FROM Friend
        GROUP BY ID1
    );


9. Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend.

    SELECT COUNT(*)
    FROM Friend
    WHERE ID1 IN 
    (
        SELECT ID2
        FROM Friend
        WHERE ID1 IN 
        (
        SELECT ID
        FROM Highschooler
        WHERE name = 'Cassandra'
        )
    );


10. Find the name and grade of the student(s) with the greatest number of friends.

    SELECT name, grade
        FROM Highschooler
        INNER JOIN Friend ON Highschooler.ID = Friend.ID1
        GROUP BY ID1
        HAVING COUNT(*) = 
        (
            SELECT MAX(count)
            FROM 
            (
                SELECT COUNT(*) AS count
                FROM Friend
                GROUP BY ID1
            )
        );
